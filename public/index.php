<?phpuse Phalcon\Loader;use Phalcon\Mvc\Micro;use Phalcon\Di\FactoryDefault;use Phalcon\Http\Response;use  Phalcon\Mvc\Model\Manager;use Phalcon\Mvc\Model\ResultsetInterface;use Phalcon\Paginator\Adapter\Model as PaginatorModel;use Phalcon\Db\Adapter\Pdo\Mysql as PdoMysql;use Api\Monasteries\{Posts, Tags, Videos, PostTypes, PostLangs, Monasteries};try {$loader = new Loader();$loader->registerNamespaces(['Api\Monasteries' => realpath( __DIR__ . '/models/' )]);$loader->register();$di = new FactoryDefault();$di->set(	'db',	function () {//  db.php contains array('host','username','password','dbname','options')	    $db = include __DIR__.'../db.php';		return new PdoMysql($db);	});$di->setShared(	'response',	function () {		$response = new Response();		$response->setContentType('application/json', 'utf-8');		return $response;	});$app = new Micro($di);$app->before(	function () use ($app) {        $origin = $app->request->getHeader("ORIGIN") ? $app->request->getHeader("ORIGIN") : '*';        $app->response->setHeader("Access-Control-Allow-Origin", $origin)                      ->setHeader("Access-Control-Allow-Methods", 'GET,PUT,POST,DELETE,OPTIONS')                      ->setHeader("Access-Control-Allow-Headers", 'Origin, X-Requested-With, Content-Range, Content-Disposition, Content-Type, Authorization')                      ->setHeader("Access-Control-Allow-Credentials", true)	                    ->setContentType('application/json', 'utf-8');    return true;});$app->get(	'/api/videos/{page:[0-9]+}',	function ($page) use ($app) {		$currentPage = isset($page)? (int) $page: 1;		$videos = Api\Monasteries\Videos::find();		$response = new Response();		$response->setHeader("Access-Control-Allow-Origin", '*');		$paginator = new PaginatorModel(			[				'data'  => $videos,				'limit' => 12,				'page'  => $currentPage,			]		);		$page = $paginator->getPaginate();		if ($videos === false) {			$response->setJsonContent(				[					'status' => 'NOT-FOUND'				]			);		} else {			$response->setJsonContent(				[					'status' => '200',					'data'   => $page				]			);		}		return $response;	});	$app->get(		'/api/posts-list',		function () use ($app) {			$response = new Response();			$response->setHeader("Access-Control-Allow-Origin", '*');			$data = [];			$types = PostTypes::find();			foreach ($types as $type){				$data['types'][$type->id] = ['name' => $type->name, 'color' => $type->color];				$posts = $this					->modelsManager					->executeQuery("SELECT pl.title AS title, pl.lang_id AS lang_id, pl.id AS id, p.created_at, p.id as post_id, p.post_type_id AS post_type_id 						from Api\Monasteries\PostLangs pl				    inner join Api\Monasteries\Posts p						where p.post_type_id = :type:						order by p.id desc						LIMIT 3",						['type' => intval($type->id)]);				foreach ($posts as $post){					$images = '/home/inok/inok.info/image/posts/'. $post->id. '/1.jpg';					$data['types'][$type->id]['posts'][$post->id] = [						'title' => $post->title,						'lang_id' => $post->lang_id,						'image' => file_exists($images) ?  'http://image.'. $_SERVER['SERVER_NAME'].'/posts/'. $post->post_id. '/1.jpg' : '',						'date' => strftime('%m/%Y', strtotime($post->created_at))					];				}			}			$tags = Tags::find();			foreach ($tags as $tag){				$data['tags'][] = [					'id' => intval($tag->id),					'name' => $tag->currentTag->title,				];			}			if ($data['posts'] === false) {				$response->setStatusCode(404, "Not Found");				$response->setJsonContent([ 'status' => 'NOT-FOUND' ]);			}else{				$response->setStatusCode(200, "OK");				$response->setJsonContent($data);			}			return $response;		}	);$app->get(	'/api/monasteries',	function() {		$response = new Response();		$response->setHeader("Access-Control-Allow-Origin", '*');		$data = [];		$monasteries = Monasteries::find([			'limit' => 50,			'order' => 'RAND()'		]);		foreach ($monasteries as $one){			$images = '/home/inok/inok.info/image/monasteries/thumbnails/'.$one->id.'.jpg';			$data[] = [				'id' => $one->id,				'image' => file_exists($images) ? 'http://image.inok.info/monasteries/thumbnails/'.$one->id.'.jpg' : '',				'url' => 'https://monasteries.org.ua/objects/monasteries/'.$one->id.'/?lang=ru'			];		}		if ($data === false) {			$response->setStatusCode(404, "Not Found");			$response->setJsonContent([ 'status' => 'NOT-FOUND' ]);		}else{			$response->setStatusCode(200, "OK");			$response->setJsonContent($data);		}		return $response;	});$app->get(	'/api/monasteries/{id:[0-9]+}',	function ($id) use ($app){		$response = new Response();		$response->setHeader("Access-Control-Allow-Origin", '*');		$data = Monasteries::findFirstById($id);		if ($data === false) {			$response->setStatusCode(404, "Not Found");			$response->setJsonContent([ 'status' => 'NOT-FOUND' ]);		}else{			$response->setStatusCode(200, "OK");			$response->setJsonContent($data);		}		return $response;	});$app->get(	'/api/post/{id:[0-9]+}/{lang:[0-9]+}',	function ($id, $lang) use ($app) {		$phql = 'SELECT * FROM Api\Monasteries\PostLangs WHERE lang_id = :lang: AND post_id = :id:';		$data = $app->modelsManager->executeQuery($phql, [ 'id' => $id, 'lang' => $lang])->getFirst();		$response = new Response();		$response->setHeader("Access-Control-Allow-Origin", '*');		if ($data === false) {			$response->setJsonContent(				[					'status' => 'NOT-FOUND'				]			);			return $response;		}			$phql2 = 'SELECT monasteries.id as monastery_id, diocese.name as d_name, country.name as c_name, settlement.name as s_name, region.name as r_name								FROM Api\Monasteries\Monasteries as monasteries								JOIN Api\Monasteries\CountriesLang as country ON monasteries.country_id = country.country_id AND country.lang_id = :lang:								JOIN Api\Monasteries\DiocesesLang as diocese ON monasteries.diocese_id = diocese.diocese_id AND diocese.lang_id = :lang:								JOIN Api\Monasteries\SettlementsLang as settlement ON monasteries.settlement_id = settlement.settlement_id AND settlement.lang_id = :lang: 								JOIN Api\Monasteries\RegionsLang as region ON monasteries.region_id = region.region_id AND region.lang_id = :lang:								WHERE monasteries.id = :id:';			$place = $app->modelsManager->executeQuery($phql2, [ 'id' => $data->post->monastery_id, 'lang' => $lang])->getFirst();			$image_path = array_diff(scandir('/home/inok/inok.info/image/posts/'. $data->post_id), array('..', '.'));			$images = [];			foreach ($image_path as $key=>$image){				$images[] = [					'id' => $key,					'link'=>"http://image.{$_SERVER['SERVER_NAME']}/posts/{$data->post_id}/{$image}"				];			}			$response->setJsonContent(				[					'status' => 'FOUND',					'data' => [						'id' => $data->id,						'title' => $data->title,						'image' => $images,						'content' => $data->content,						'source' =>$data->post->source,						'place' => $place					]				]			);		return $response;	});$app->get(	'/resize-image',	function (){		$array = Monasteries::find([			'columns' => 'id'		]);		foreach ($array as $one){			$images = '/home/inok/inok.info/image/monasteries/'.$one->id.'/00.JPG';//			$images = '/home/inok/inok.info/image/monasteries/thumbnails/'.$one->id.'.jpg';			if(file_exists($images)){				echo $one->id . '<br/>';			$image = new \Phalcon\Image\Adapter\Gd($images);//			$image->resize(//				300,//				null,//				\Phalcon\Image::WIDTH//			);			$image->save('/home/inok/inok.info/image/monasteries/'.$one->id.'/00.jpg');			}		}	});$app->notFound(function () use ($app) {	$app->response->setStatusCode(404, "Не найдена")->sendHeaders();	echo 'Безумие. Эта страница не работает!';});$app->handle();} catch (\Exception $e) {	echo $e->getMessage(), PHP_EOL;	echo $e->getTraceAsString();}